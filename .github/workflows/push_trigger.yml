name: Maven Package upon a push

on:
  push:
    branches:
      - '!release-branch'
      - release-1*
      - master
      - develop
      - 1.0.*
      - 1.1.*
      - 1.2.*

jobs:
  build-admin-ui:
    runs-on: ubuntu-latest
    env:
      NAMESPACE: ${{ secrets.dev_namespace_docker_hub }}
      SERVICE_NAME: idp-ui
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1

      - name: Setup branch and env
        run: |
          # Strip git ref prefix from version
          echo "BRANCH_NAME=$(echo ${{ github.ref }} | sed -e 's,.*/\(.*\),\1,')" >> $GITHUB_ENV
          echo "GPG_TTY=$(tty)" >> $GITHUB_ENV

      - name: run sonar analysis
        run: |
          echo "sonar.host.url=https://sonarcloud.io/
             sonar.login=${{ secrets.SONAR_TOKEN }}
             sonar.projectKey=mosip_idp-ui
             sonar.organization=${{ secrets.ORG_KEY }}
             sonar.sourceEncoding=UTF-8
             sonar.sources=src
             sonar.exclusions=**/node_modules/**
             sonar.tests=src
             sonar.test.inclusions=**/*.spec.ts
             sonar.typescript.lcov.reportPaths=coverage/lcov.info" >> sonar-project.properties
          npm install sonar-scanner && npm run sonar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Build image
        run: |
          docker build . --file Dockerfile --tag ${{ env.SERVICE_NAME }}

      - name: Log into registry
        run: echo "${{ secrets.release_docker_hub }}" | docker login -u ${{ secrets.actor_docker_hub }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=$NAMESPACE/$SERVICE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          if [[ $BRANCH_NAME == master ]]; then
          VERSION=latest
          else
          VERSION=$BRANCH_NAME
          fi
          echo "push version $VERSION"
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $SERVICE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION